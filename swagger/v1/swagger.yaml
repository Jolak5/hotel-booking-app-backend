---
openapi: 3.0.1
info:
  title: Hotel Booking App
  version: v1
paths:
  "/hotels":
    get:
      summary: Retrieves all hotels
      tags:
      - Hotels
      responses:
        '200':
          description: hotels found
    post:
      summary: Creates a hotel
      tags:
      - Hotels
      parameters: []
      responses:
        '201':
          description: hotel created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                duration:
                  type: integer
                price:
                  type: integer
                image:
                  type: string
              required:
              - name
              - description
              - duration
              - price
              - image
  "/hotels/{id}":
    get:
      summary: Retrieves a hotel
      tags:
      - Hotels
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: hotel found
        '404':
          description: hotel not found
    put:
      summary: Updates a hotel
      tags:
      - Hotels
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: hotel updated
        '404':
          description: hotel not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                duration:
                  type: integer
                price:
                  type: integer
                image:
                  type: string
              required:
              - name
              - description
              - duration
              - price
              - image
    delete:
      summary: Deletes a hotel
      tags:
      - Hotels
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: hotel deleted
        '404':
          description: hotel not found
  "/reservations":
    get:
      summary: Retrieves all reservations
      tags:
      - Reservations
      responses:
        '200':
          description: reservations found
    post:
      summary: Creates a reservation
      tags:
      - Reservations
      parameters: []
      responses:
        '201':
          description: reservation created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                hotel_id:
                  type: integer
                reservation_date:
                  type: string
                  format: date-time
              required:
              - user_id
              - hotel_id
              - reservation_date
  "/reservations/{id}":
    get:
      summary: Retrieves a reservation
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: reservation found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user_id:
                    type: integer
                  hotel_id:
                    type: integer
                  reservation_date:
                    type: string
                    format: date-time
        '404':
          description: reservation not found
    put:
      summary: Updates a reservation
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: reservation updated
        '404':
          description: reservation not found
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                hotel_id:
                  type: integer
                reservation_date:
                  type: string
                  format: date-time
              required:
              - user_id
              - hotel_id
              - reservation_date
    delete:
      summary: Deletes a reservation
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: reservation deleted
        '404':
          description: reservation not found
  "/sessions":
    post:
      summary: Creates a new session (login)
      tags:
      - Sessions
      parameters: []
      responses:
        '200':
          description: session created
        '400':
          description: invalid username or password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
              required:
              - name
              - password
  "/users":
    get:
      summary: Retrieves all users
      tags:
      - Users
      responses:
        '200':
          description: users found
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/User"
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
              required:
              - name
              - password
  "/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '404':
          description: user not found
    put:
      summary: Updates a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user updated
        '404':
          description: user not found
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
              required:
              - name
              - password
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: user deleted
        '404':
          description: user not found
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
